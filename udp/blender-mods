{"modules":{"0.4391987219922212":{"definition":"//\r\n// control slider\r\n//\r\n// Neil Gershenfeld \r\n// (c) Massachusetts Institute of Technology 2016\r\n// \r\n// This work may be reproduced, modified, distributed, performed, and \r\n// displayed for any purpose, but must acknowledge the mods\r\n// project. Copyright is retained and must be preserved. The work is \r\n// provided as is; no warranty is provided, and users accept all \r\n// liability.\r\n//\r\n// closure\r\n//\r\n(function(){\r\n//\r\n// module globals\r\n//\r\nvar mod = {}\r\n//\r\n// name\r\n//\r\nvar name = 'slider'\r\n//\r\n// initialization\r\n//\r\nvar init = function() {\r\n   var min = 0\r\n   var max = 1\r\n   mod.range.min = min\r\n   mod.min.value = '0'\n   mod.range.max = max\r\n   mod.max.value = '10'\n   mod.range.step = (max-min)/mods.ui.canvas\r\n   mod.range.value = '0.656'\n   mod.value.value = '0.656'\n   }\r\n//\r\n// inputs\r\n//\r\nvar inputs = {}\r\n//\r\n// outputs\r\n//\r\nvar outputs = {\r\n   value:{type:'',\r\n      event:function(){\r\n         mods.output(mod,'value',parseFloat(mod.range.value))}}}\r\n//\r\n// interface\r\n//\r\nvar interface = function(div){\r\n   mod.div = div\r\n   input = document.createElement('input')\r\n      input.type = 'range'\r\n      input.style.width = mods.ui.canvas\r\n      input.addEventListener('input',function(evt){\r\n         mod.value.value = mod.range.value\r\n         outputs.value.event()\r\n         })\r\n      div.appendChild(input)\r\n      mod.range = input\r\n   div.appendChild(document.createElement('br'))\r\n   div.appendChild(document.createTextNode('min: '))\r\n   input = document.createElement('input')\r\n      input.type = 'text'\r\n      input.size = 3\r\n      input.addEventListener('input',function(evt){\r\n         mod.range.min = parseFloat(mod.min.value)\r\n         mod.range.step = \r\n            (parseFloat(mod.range.max)-parseFloat(mod.range.min))\r\n            /mods.ui.canvas\r\n         })\r\n      div.appendChild(input)\r\n      mod.min = input\r\n   div.appendChild(document.createTextNode(' value: '))\r\n   input = document.createElement('input')\r\n      input.type = 'text'\r\n      input.size = 3\r\n      input.addEventListener('input',function(evt){\r\n         mod.range.value = parseFloat(mod.value.value)\r\n         outputs.value.event()\r\n         })\r\n      div.appendChild(input)\r\n      mod.value = input\r\n   div.appendChild(document.createTextNode(' max: '))\r\n   input = document.createElement('input')\r\n      input.type = 'text'\r\n      input.size = 3\r\n      input.addEventListener('input',function(evt){\r\n         mod.range.max = parseFloat(mod.max.value)\r\n         mod.range.step = \r\n            (parseFloat(mod.range.max)-parseFloat(mod.range.min))\r\n            /mods.ui.canvas\r\n         })\r\n      div.appendChild(input)\r\n      mod.max = input\r\n   }\r\n//\r\n// local functions\r\n//\r\n;\r\n//\r\n// return values\r\n//\r\nreturn ({\r\n   mod:mod,\r\n   name:name,\r\n   init:init,\r\n   inputs:inputs,\r\n   outputs:outputs,\r\n   interface:interface\r\n   })\r\n}())\r\n","top":"72.69689226007091","left":"395.293347775501","inputs":{},"outputs":{}},"0.5983734032075035":{"definition":"//\n// UDP server module\n//\n// Neil Gershenfeld\n// (c) Massachusetts Institute of Technology 2016\n// Modified by Francisco Sanchez 4th May 2020\n//\n// This work may be reproduced, modified, distributed, performed, and\n// displayed for any purpose, but must acknowledge the mods\n// project. Copyright is retained and must be preserved. The work is\n// provided as is; no warranty is provided, and users accept all\n// liability.\n//\n// closure\n//\n(function(){\n//\n// module globals\n//\nvar mod = {}\n//\n// name\n//\nvar name = 'WebSocket UDP'\n//\n// initialization\n//\nvar init = function() {\n   mod.address.value = '127.0.0.1'\n   mod.port.value = '1238'\n   mod.localhost.value = '127.0.0.1,192.168.1.57'\n   mod.localport.value = '2345'\n   mod.remotehost.value = '127.0.0.1'\n   mod.remoteport.value = '3456'\n   mod.socket = null\n   socket_open()\n   }\n//\n// inputs\n//\nvar inputs = {\n   transmit:{type:'string',\n      event:function(evt){\n         send_string(evt.detail)\n         }}}\n//\n// outputs\n//\nvar outputs = {\n   receive:{type:'string',\n      event:function(str){\n         mods.output(mod,'receive',str)}}}\n//\n\n//\n// interface\n//\nvar interface = function(div){\n   mod.div = div\n   //\n   // server\n   //\n   var a = document.createElement('a')\n      a.href = './js/udpserver.js'\n      a.innerHTML = 'udpserver.js'\n      a.target = '_blank'\n   div.appendChild(a)\n   div.appendChild(document.createElement('br'))\n   //\n   // status\n   //\n   input = document.createElement('input')\n      input.classList.add(\"marquee\")     \n      input.disabled = true\n      input.type = 'text'\n      input.size = 19\n      div.appendChild(input)\n      mod.status = input\n   div.appendChild(document.createElement('br'))\n   //\n   // address\n   //\n   div.appendChild(document.createTextNode('address: '))\n   input = document.createElement('input')\n      input.type = 'text'\n      input.size = 10\n      div.appendChild(input)\n      mod.address = input\n   div.appendChild(document.createElement('br'))\n   //\n   // port\n   //\n   div.appendChild(document.createTextNode('\\u00a0\\u00a0\\u00a0port: '))\n   input = document.createElement('input')\n      input.type = 'text'\n      input.size = 10\n      div.appendChild(input)\n      mod.port = input\n   div.appendChild(document.createElement('br'))\n   //\n   // open/close\n   //\n   var btn = document.createElement('button')\n      btn.style.margin = 1\n      btn.appendChild(document.createTextNode('open socket'))\n      btn.addEventListener('click',function() {\n         socket_open()\n         })\n      div.appendChild(btn)\n   var btn = document.createElement('button')\n      btn.style.margin = 1\n      btn.appendChild(document.createTextNode('close socket'))\n      btn.addEventListener('click',function() {\n         socket_close()\n         })\n      div.appendChild(btn)\n   div.appendChild(document.createElement('br'))\n\n   //\n   // local\n   //\n   div.appendChild(document.createTextNode('local UDP:'))\n   div.appendChild(document.createElement('br'))\n   //\n   // host\n   //\n   div.appendChild(document.createTextNode('\\u00a0\\u00a0\\u00a0\\u00a0\\u00a0host: '))\n   var input = document.createElement('input')\n      input.type = 'text'\n      input.size = 10\n      div.appendChild(input)\n      mod.localhost = input\n   div.appendChild(document.createElement('br'))\n   //\n   // port\n   //\n   div.appendChild(document.createTextNode('\\u00a0\\u00a0\\u00a0\\u00a0\\u00a0port: '))\n   var input = document.createElement('input')\n      input.type = 'text'\n      input.size = 10\n      div.appendChild(input)\n      mod.localport = input\n   div.appendChild(document.createElement('br'))\n   //\n   // remote\n   //\n   div.appendChild(document.createTextNode('remote UDP:'))\n   div.appendChild(document.createElement('br'))\n   //\n   // host\n   //\n   div.appendChild(document.createTextNode('\\u00a0\\u00a0\\u00a0\\u00a0\\u00a0host: '))\n   var input = document.createElement('input')\n      input.type = 'text'\n      input.size = 10\n      div.appendChild(input)\n      mod.remotehost = input\n   div.appendChild(document.createElement('br'))\n   //\n   // port\n   //\n   div.appendChild(document.createTextNode('\\u00a0\\u00a0\\u00a0\\u00a0\\u00a0port: '))\n   var input = document.createElement('input')\n      input.type = 'text'\n      input.size = 10\n      div.appendChild(input)\n      mod.remoteport = input\n   }\n//\n// local functions\n//\nfunction socket_open() {\n   var url = \"ws://\"+mod.address.value+':'+mod.port.value\n   mod.socket = new WebSocket(url)\n   mod.socket.onopen = function(event) {\n      mod.status.value = \"socket opened\"\n      open_local()\n      }\n   mod.socket.onerror = function(event) {\n      mod.status.value = \"can not open\"\n      mod.socket = null\n      }\n   mod.socket.onmessage = function(event) {\n      var msg = JSON.parse(event.data)\n      if (msg.type == 'status')\n         mod.status.value = msg.status\n      else if (msg.type == 'listening') {\n         mod.status.value = msg.status\n         mod.localhost.value = msg.addresses\n         }\n      else if (msg.type == 'message') {\n         outputs.receive.event(msg.message)\n         mod.status.value = 'receive '+JSON.stringify(msg.info)\n         }\n      }\n   }\nfunction socket_close() {\n   mod.socket.close()\n   mod.status.value = \"socket closed\"\n   mod.socket = null\n   }\nfunction socket_send(msg) {\n   if (mod.socket != null) {\n      mod.status.value = \"send\"\n      mod.socket.send(msg)\n      }\n   else {\n      mod.status.value = \"can't send, not open\"\n      }\n   }\nfunction open_local() {\n   if (mod.socket == null) {\n      mod.status.value = \"socket not open\"\n      }\n   else {\n      var msg = {}\n      msg.type = 'open local'\n      msg.port = parseInt(mod.localport.value)\n      mod.socket.send(JSON.stringify(msg))\n      }\n   }\nfunction send_string(str) {\n   if (mod.socket == null) {\n      mod.status.value = \"socket not open\"\n      }\n   else {\n      var msg = {}\n      msg.type = 'send string'\n      msg.host = mod.remotehost.value\n      msg.port = parseInt(mod.remoteport.value)\n      msg.string = str\n      mod.socket.send(JSON.stringify(msg))\n      mod.status.value = 'transmit'\n      }\n   }\n//\n// return values\n//\nreturn ({\n   mod:mod,\n   name:name,\n   init:init,\n   inputs:inputs,\n   outputs:outputs,\n   interface:interface\n   })\n}())\n","top":"410","left":"611","inputs":{},"outputs":{}},"0.8432572777869488":{"definition":"//\n// read text\n//\n// Neil Gershenfeld \n// (c) Massachusetts Institute of Technology 2017\n// Modified by Francisco Sanchez 31-Jan-2020\n// \n// This work may be reproduced, modified, distributed, performed, and \n// displayed for any purpose, but must acknowledge the mods\n// project. Copyright is retained and must be preserved. The work is \n// provided as is; no warranty is provided, and users accept all \n// liability.\n//\n// closure\n//\n(function(){\n//\n// module globals\n//\nvar mod = {}\n//\n// name\n//\nvar name = 'read text'\n//\n// initialization\n//\nvar init = function() {\n   mod.text.value = '0.656'\n   }\n//\n// inputs\n//\nvar inputs = {\n   text:{type:'',\n      event:function(evt) {\n         mod.text.value = evt.detail\n         }}}\n//\n// outputs\n//\nvar outputs = {\n   text:{type:'',\n      event:function(){\n         mods.output(mod,'text',mod.text.value)}}}\n//\n// interface\n//\nvar interface = function(div){\n   mod.div = div\n   //\n   // file input control\n   //\n   var file = document.createElement('input')\n      file.setAttribute('type','file')\n      file.setAttribute('id',div.id+'file_input')\n      file.style.position = 'absolute'\n      file.style.left = 0\n      file.style.top = 0\n      file.style.width = 0\n      file.style.height = 0\n      file.style.opacity = 0\n      file.addEventListener('change',function() {\n         text_read_handler()\n         })\n      div.appendChild(file)\n      mod.file = file\n   //\n   // text\n   //\n   var text = document.createElement('textarea')\n      text.setAttribute('rows',mods.ui.rows)\n      text.setAttribute('cols',mods.ui.cols)\n      text.addEventListener('input',function() {\n         outputs.text.event()\n         })\n      //\n      // watch textarea for resize\n      //\n      new MutationObserver(update_module).observe(text, {\n      attributes: true, attributeFilter: [ \"style\" ]\n      })\n      div.appendChild(text)\n      mod.text = text\n   div.appendChild(document.createElement('br'))\n   //\n   // file select button\n   //\n   var btn = document.createElement('button')\n      btn.style.padding = mods.ui.padding\n      btn.style.margin = 1\n      btn.appendChild(document.createTextNode('select text file'))\n      btn.addEventListener('click',function(){\n         var file = document.getElementById(div.id+'file_input')\n         file.value = null\n         file.click()\n         })\n      div.appendChild(btn)\n   div.appendChild(document.createElement('br'))\n   }\n//\n// local functions\n//\n// read handler\n//\nfunction text_read_handler(event) {\n   //\n   // read as text\n   //\n   var file_reader = new FileReader()\n   file_reader.onload = text_load_handler\n   var input_file = mod.file.files[0]\n   file_reader.readAsText(input_file)\n   }\n//\n// load handler\n//\nfunction text_load_handler(event) {\n   mod.text.value = event.target.result\n   outputs.text.event()\n   }\n//\n// update module\n//\nfunction update_module() {\n   mods.fit(mod.div)\n   }\n//\n// return values\n//\nreturn ({\n   mod:mod,\n   name:name,\n   init:init,\n   inputs:inputs,\n   outputs:outputs,\n   interface:interface\n   })\n}())\n","top":"221.2208583407953","left":"432.503253727593","inputs":{},"outputs":{}}},"links":["{\"source\":\"{\\\"id\\\":\\\"0.4391987219922212\\\",\\\"type\\\":\\\"outputs\\\",\\\"name\\\":\\\"value\\\"}\",\"dest\":\"{\\\"id\\\":\\\"0.8432572777869488\\\",\\\"type\\\":\\\"inputs\\\",\\\"name\\\":\\\"text\\\"}\"}","{\"source\":\"{\\\"id\\\":\\\"0.8432572777869488\\\",\\\"type\\\":\\\"outputs\\\",\\\"name\\\":\\\"text\\\"}\",\"dest\":\"{\\\"id\\\":\\\"0.5983734032075035\\\",\\\"type\\\":\\\"inputs\\\",\\\"name\\\":\\\"transmit\\\"}\"}"]}